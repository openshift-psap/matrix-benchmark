#!/usr/bin/env python3
import time
import importlib
import re
import argparse
import yaml
import measurement
import utils.yaml
from experiment import Experiment

# some arguments
parser = argparse.ArgumentParser()
parser.add_argument('-d', '--desc', help='description')
args = parser.parse_args()

# load configuration file
# TODO pass somehow to measurement. Global??
cfg = utils.yaml.load_multiple("benchmark.yaml", "secure.yaml")
description = utils.yaml.subyaml(cfg, 'description')
if not description:
    description = args.desc

experiment = Experiment(cfg)
if description:
    experiment.set_param('description', description)

# load and initialize measurements
measurements = []
name_re = re.compile(r'^[a-z_][a-z0-9_]*$', re.I)
for m in cfg['measurements']:
    cfg = None
    if type(m) == dict:
        l = list(m.keys())
        assert len(l) == 1, 'Invalid measurement specification %s' % m
        cfg = m[l[0]]
        m = l[0]
    if type(m) != str or not name_re.match(m):
        raise Exception('Invalid module name %s' % m)
    mod = importlib.import_module('measurement.' + m.lower())
    measurements.append(getattr(mod, m)(cfg, experiment))

for m in measurements:
    m.setup()
for m in measurements:
    m.start()

# TODO do something more useful!
time.sleep(5)

for m in measurements:
    m.stop()
for m in measurements:
    m.collect()

# save to database
experiment.save()
