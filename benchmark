#!/usr/bin/env python3
import time
import importlib
import re
import argparse
import copy
import sys
import yaml
import measurement
import utils.yaml
from experiment import Experiment

# some arguments
parser = argparse.ArgumentParser()
parser.add_argument('-d', '--desc', help='description')
parser.add_argument('--matrix', action='store_true',
                    help='run a matrix of tests')
args = parser.parse_args()

# load configuration file
# TODO pass somehow to measurement. Global??
cfg = utils.yaml.load_multiple("benchmark.yaml", "secure.yaml")
description = utils.yaml.subyaml(cfg, 'description')
if not description:
    description = args.desc

# this generator will generate combination of list with some maximum
# changes
def matrix(rest, changes):
    if len(rest) == 0:
        if changes >= 0:
            yield ()
        return
    if changes < 0:
        return
    for o in matrix(rest[1:], changes):
        yield (rest[0][0],) + o
    if changes <= 0:
        return
    changes -= 1
    for x in rest[0][1:]:
        for o in matrix(rest[1:], changes):
            yield (x,) + o

# run a single test
def run_one(cfg):
    print('Running one test with configuraton', cfg['measurements'])

    experiment = Experiment(cfg)
    if description:
        experiment.set_param('description', description)

    # load and initialize measurements
    measurements = []
    name_re = re.compile(r'^[a-z_][a-z0-9_]*$', re.I)
    for m in cfg['measurements']:
        cfg = None
        if type(m) == dict:
            l = list(m.keys())
            assert len(l) == 1, 'Invalid measurement specification %s' % m
            cfg = m[l[0]]
            m = l[0]
        if type(m) != str or not name_re.match(m):
            raise Exception('Invalid module name %s' % m)
        mod = importlib.import_module('measurement.' + m.lower())
        measurements.append(getattr(mod, m)(cfg, experiment))

    for m in measurements:
        m.setup()
    for m in measurements:
        m.start()

    # TODO do something more useful!
    time.sleep(5)

    for m in measurements:
        m.stop()
    for m in measurements:
        m.collect()

    # save to database
    experiment.save()

# launch a single test
if not args.matrix:
    run_one(cfg)
    sys.exit(0)

# launch a matrix of tests
orig_cfg = cfg
option_names = list(cfg['matrix'].keys())
for options in matrix(list(cfg['matrix'].values()), 1):
    # change based on the options
    cfg = copy.deepcopy(orig_cfg)
    options = dict(zip(option_names, options))
    for name, value in options.items():
        utils.yaml.set_subyaml(cfg, name, value)
    run_one(cfg)
